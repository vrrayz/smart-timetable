// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  courses         Course[]
  terms           Term[]
  role            String           @default("member") //admin and member
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  studyPreference StudyPreference?
  TimeTable       TimeTable[]
  currentTerm     CurrentTerm?
  schedule        Schedule[]
  class           Class[]
  task            Task[]
}

model Course {
  id         Int         @id @default(autoincrement())
  title      String
  courseCode String?
  User       User?       @relation(fields: [userId], references: [id])
  userId     Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  TimeTable  TimeTable[]
  Term       Term?       @relation(fields: [termId], references: [id])
  termId     Int?
  class      Class[]
}

model Term {
  id          Int          @id @default(autoincrement())
  title       String
  User        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  TimeTable   TimeTable[]
  courses     Course[]
  currentTerm CurrentTerm?
  schedule    Schedule[]
  class       Class[]
}

model CurrentTerm {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
  Term   Term? @relation(fields: [termId], references: [id])
  termId Int?  @unique
}

model StudyPreference {
  id            Int       @id @default(autoincrement())
  User          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  startTime     Int //in milliseconds
  endTime       Int //in milliseconds
  coursesPerDay Int
  breaksPerDay  Int //in percentage of the startTime to endTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model TimeTable {
  id        Int       @id @default(autoincrement())
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  Term      Term      @relation(fields: [termId], references: [id])
  termId    Int
  Course    Course    @relation(fields: [courseId], references: [id])
  courseId  Int
  days      String // days would be seperated by commas eg Monday,Tuesday, Wednesday or set to Everyday
  startTime Int
  endTime   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Class {
  id        Int        @id @default(autoincrement())
  User      User       @relation(fields: [userId], references: [id])
  userId    Int
  Course    Course     @relation(fields: [courseId], references: [id])
  courseId  Int //must be required if the class option is selected
  Term      Term       @relation(fields: [termId], references: [id])
  termId    Int
  room      String?
  building  String?
  lecturer  String?
  schedule  Schedule[]
  repeat    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model Task {
  id        Int        @id @default(autoincrement())
  User      User       @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  detail    String?
  schedule  Schedule[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model Schedule {
  id        Int       @id @default(autoincrement())
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  Term      Term?      @relation(fields: [termId], references: [id])
  termId    Int?
  class     Class?    @relation(fields: [classId], references: [id])
  classId   Int?
  days      String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Task      Task?     @relation(fields: [taskId], references: [id])
  taskId    Int?
}
